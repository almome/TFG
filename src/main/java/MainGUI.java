/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.SpringLayout;
import javax.swing.SwingUtilities;
//import javax.swing.text.Document;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;




/**
 *
 * @author Alexandra Morón Méndez
 */
public class MainGUI extends javax.swing.JFrame {
    public ArrayList<String> etiquetas; //Provisional
    public ArrayList<Boolean> obligatorio; //Provisional
    public ArrayList<String> tipo; //Provisional
    public ArrayList<TreeNode> experimentos;
    public DefaultTreeModel modelo;
    public DefaultMutableTreeNode root;
    DefaultTreeCellRenderer renderer;
    
    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
        renderer = (DefaultTreeCellRenderer) ProyectosTree.getCellRenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProyectosTree = new javax.swing.JTree();
        jPanelLabels = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        BarrajMenu = new javax.swing.JMenuBar();
        archivosjMenu = new javax.swing.JMenu();
        nuevojMenu = new javax.swing.JMenu();
        experjMenu = new javax.swing.JMenuItem();
        clasificajMenu = new javax.swing.JMenuItem();
        tareajMenu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        runjMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        ProyectosTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        ProyectosTree.setRootVisible(false);
        ProyectosTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ProyectosTreeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(ProyectosTree);

        jTabbedPane1.addTab("Experimentos", jScrollPane1);

        jPanelLabels.setAutoscrolls(true);

        javax.swing.GroupLayout jPanelLabelsLayout = new javax.swing.GroupLayout(jPanelLabels);
        jPanelLabels.setLayout(jPanelLabelsLayout);
        jPanelLabelsLayout.setHorizontalGroup(
            jPanelLabelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelLabelsLayout.setVerticalGroup(
            jPanelLabelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 339, Short.MAX_VALUE)
        );

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTabbedPane3.addTab("Consola", jScrollPane2);

        archivosjMenu.setText("Archivos");

        nuevojMenu.setText("Nuevo");

        experjMenu.setText("Experimento");
        experjMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                experjMenuActionPerformed(evt);
            }
        });
        nuevojMenu.add(experjMenu);

        clasificajMenu.setText("Clasificador");
        clasificajMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clasificajMenuActionPerformed(evt);
            }
        });
        nuevojMenu.add(clasificajMenu);

        tareajMenu.setText("Tarea");
        tareajMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tareajMenuActionPerformed(evt);
            }
        });
        nuevojMenu.add(tareajMenu);

        archivosjMenu.add(nuevojMenu);

        jMenu1.setText("Ejecutar");
        archivosjMenu.add(jMenu1);

        jMenu2.setText("Guardar");
        archivosjMenu.add(jMenu2);

        BarrajMenu.add(archivosjMenu);

        runjMenu.setText("Run");
        BarrajMenu.add(runjMenu);

        setJMenuBar(BarrajMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelLabels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelLabels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*BOTONES PRINCIPALES DE LA BARRA DE MENU*/
    /**
     * Método que llama a la ventana de crear experimento.
     * @param evt 
     */
    private void experjMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_experjMenuActionPerformed

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WindowsInstances.createDirectoryGUI.setVisible(true);
            }
        });
    }//GEN-LAST:event_experjMenuActionPerformed
    /**
     * Método que llama a la ventana de crear clasificador
     * @param evt 
     */
    private void clasificajMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clasificajMenuActionPerformed
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WindowsInstances.createClasificadorGUI.mostrarCampos();
                WindowsInstances.createClasificadorGUI.setVisible(true);
                
            }
        });
    }//GEN-LAST:event_clasificajMenuActionPerformed
    /**
     * Método que llama a la ventana de crear tarea
     * @param evt 
     */
    private void tareajMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tareajMenuActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WindowsInstances.createTareaGUI.mostrarCampos();
                WindowsInstances.createTareaGUI.setVisible(true);
            }
        });
    }//GEN-LAST:event_tareajMenuActionPerformed
    
    /*ACCIONES CUANDO SE ABRA LA VENTANA*/  
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.modelo = (DefaultTreeModel) this.ProyectosTree.getModel();
        this.root = (DefaultMutableTreeNode) this.modelo.getRoot();
    }//GEN-LAST:event_formWindowOpened
    /**
     * Método de acción cuando se hace click con el botón derecho del ratón en un nodo del arbol
     * @param evt 
     */
    private void ProyectosTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProyectosTreeMousePressed
        if(SwingUtilities.isRightMouseButton(evt))
        {
            TreePath path = ProyectosTree.getPathForLocation(evt.getX(), evt.getY());
            Rectangle pathBounds = ProyectosTree.getUI().getPathBounds(ProyectosTree, path);
            if(pathBounds != null && pathBounds.contains(evt.getX (), evt.getY ()))
            {
                CustomMutableTreeNode hijo = (CustomMutableTreeNode) path.getLastPathComponent();
                hijo.getNodeType().popupMenu(hijo);
            }
        }
        else{
            if(SwingUtilities.isLeftMouseButton(evt)){  //Si es nodo tarea muestra la ventana principal con los campos del xml

                jPanelLabels.removeAll();
                
                TreePath path = ProyectosTree.getPathForLocation(evt.getX(), evt.getY());
                Rectangle pathBounds = ProyectosTree.getUI().getPathBounds(ProyectosTree, path);
                if(pathBounds != null && pathBounds.contains(evt.getX (), evt.getY ()))
                {
                    CustomMutableTreeNode hijo = (CustomMutableTreeNode) path.getLastPathComponent();
                    if(hijo instanceof CustomMutableTreeNode){
                        jPanelLabels.removeAll();
                        TaskNode taskNode = (TaskNode) hijo.getNodeType();
                        StructXML xmlRead = new StructXML();
                        etiquetas = new ArrayList<>();
                        tipo = new ArrayList<>();
                        obligatorio = new ArrayList<>();
                        xmlRead.leerEtiquetas(taskNode.getPlantXML(), etiquetas, tipo, obligatorio);
                        jPanelLabels.setLayout(new SpringLayout());
                        
                        ArrayList<JTextField> textCampos = new ArrayList<JTextField>();
                        ArrayList<JLabel> textLabel = new ArrayList<JLabel>();
                        for(int i = 0; i < etiquetas.size(); i++){
                            
                            textLabel.add(new JLabel(etiquetas.get(i)));
                            textCampos.add(new JTextField());
                            jPanelLabels.setLayout(null); 
                            
                            textLabel.get(i).setLocation(100, i*50);
                            textCampos.get(i).setLocation(200, i*50);
                            textLabel.get(i).setSize(100, 25);
                            textCampos.get(i).setSize(100, 25);
                            
                            jPanelLabels.add(textLabel.get(i));
                            jPanelLabels.add(textCampos.get(i));
                            
                        }
                       
                        jPanelLabels.validate();
                        jPanelLabels.repaint();

                    }
                }
                //jPanelTextBoxs.repaint();
            }
        }
    }//GEN-LAST:event_ProyectosTreeMousePressed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
    }
    /*METODOS DE GESTIÓN DEL ARBOL DE PROYECTOS*/
    /**
     * Set del arbol del proyectos.
     * @return 
     */
    public JTree getProyectosTree() {
        return ProyectosTree;
    }
    /**
     * Introduce un nodo experimento
     * @param nodo 
     */
    public void setProyectosTree(CustomMutableTreeNode nodo){
        renderer.setLeafIcon(nodo.getNodeType().getIcon());
        this.root.add(nodo);    
        this.modelo.reload();
    }
    /**
     * Introduce un nodo clasificador o tarea
     * @param nodo
     * @param PadreNodo 
     */
    public void setProyectosTree(CustomMutableTreeNode nodo, Object PadreNodo) {
        Boolean flag = false;
        CustomMutableTreeNode nodec = new CustomMutableTreeNode();
        Enumeration<CustomMutableTreeNode> e = this.root.depthFirstEnumeration();
        while (e.hasMoreElements()&& flag != true) {
            nodec = (CustomMutableTreeNode)e.nextElement();
            if (nodec.toString().equalsIgnoreCase(PadreNodo.toString()) ) {
                 flag = true;
            }
        }
        //Se crea el icono
        ProyectosTree.setCellRenderer(new DefaultTreeCellRenderer() {
            
            @Override
            public Component getTreeCellRendererComponent(JTree tree,
                    Object value, boolean selected, boolean expanded,
                    boolean isLeaf, int row, boolean focused) {
                Component c = super.getTreeCellRendererComponent(tree, value,
                        selected, expanded, isLeaf, row, focused);

                    if (value instanceof CustomMutableTreeNode) {
                    CustomMutableTreeNode nodo = (CustomMutableTreeNode) value;
                    setIcon(nodo.getNodeType().getIcon());
                }
                
                return this;
   
            }
        });
        
        nodec.add(nodo);
        this.modelo.reload();
    }
    
    public void expandAllNodes(JTree tree, int startingIndex, int rowCount){
    for(int i=startingIndex;i<rowCount;++i){
        tree.expandRow(i);
    }

    if(tree.getRowCount()!=rowCount){
        expandAllNodes(tree, rowCount, tree.getRowCount());
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar BarrajMenu;
    private javax.swing.JTree ProyectosTree;
    private javax.swing.JMenu archivosjMenu;
    private javax.swing.JMenuItem clasificajMenu;
    private javax.swing.JMenuItem experjMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanelLabels;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenu nuevojMenu;
    private javax.swing.JMenu runjMenu;
    private javax.swing.JMenuItem tareajMenu;
    // End of variables declaration//GEN-END:variables
}
